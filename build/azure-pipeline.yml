# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
- name: deployChocolatey
  displayName: Deploy installer to Chocolatey?
  type: boolean
  default: true
- name: deployDocs
  displayName: Deploy Documentation to WPEngine?
  type: boolean
  default: true
- name: deployMarketplace
  displayName: Deploy Entension to Azure DevOps marketplace?
  type: boolean
  default: false
- name: deployWinget
  displayName: Deploy Installer to Winget?
  type: boolean
  default: true


trigger:
- main
- releases/*

pr:
- main

name: $(GITVERSION_SemVer)



## TODO: THESE WILL NOT WORK! NEED TO USE Versioning Reference instead with $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  skipCompileTest: false

# Versioning of repo

stages:

# Setup with: Versioning
- stage: SetupStage
  displayName: 'Setup Stage'
  jobs: 
  - job: ConfigJob
    displayName: 'Version job'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      Agent.Source.Git.ShallowFetchDepth: 0
    steps:
    - task: gitversion/setup@1
      inputs:
        versionSpec: '5.x'
    - task: gitversion/execute@1
      displayName: 'GitVersion'
      name: GitVersion
      inputs:
        updateAssemblyInfo: true
    - task: PowerShell@2
      displayName: Set Environment Variables
      name: VersionOut
      inputs:
        targetType: 'inline'
        script: |
          $releaseTag = "Dev";
          Write-Host "##vso[task.setvariable variable=environmentName;isoutput=true]AzureDevOpsMigrationTools-Dev"
          Write-Host "##vso[task.setvariable variable=releaseTag;isoutput=true]Dev"
          Write-Host "##vso[task.setvariable variable=runRelease;isoutput=true]false"
          Write-Host "##vso[task.setvariable variable=isPreRelease;isoutput=true]true"

          if ("$(GitVersion.PreReleaseTag)" -eq "")
          {
            $releaseTag = "Release";
            Write-Host "##vso[task.setvariable variable=environmentName;isoutput=true]AzureDevOpsMigrationTools-Release"
            Write-Host "##vso[task.setvariable variable=releaseTag;isoutput=true]Release"
            Write-Host "##vso[task.setvariable variable=runRelease;isoutput=true]true"
            Write-Host "##vso[task.setvariable variable=isPreRelease;isoutput=true]false"
          }
          if ("$(GitVersion.PreReleaseLabel)" -contains "Preview")
          {
            $releaseTag = "Preview";
            Write-Host "##vso[task.setvariable variable=environmmentName;isoutput=true]AzureDevOpsMigrationTools-Preview"
            Write-Host "##vso[task.setvariable variable=releaseTag;isoutput=true]Preview"
            Write-Host "##vso[task.setvariable variable=runRelease;isoutput=true]true"
            Write-Host "##vso[task.setvariable variable=isPreRelease;isoutput=true]true"
          }
          Write-Host "##vso[build.addbuildtag]$releaseTag"

          # Output the variables for debugging
          Write-Host "GITVERSION.PreReleaseLabel: $(GITVERSION.PreReleaseLabel)"
          Write-Host "GITVERSION.SemVer: $(GITVERSION.SemVer)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.AssemblySemVer: $(GitVersion.AssemblySemVer)"
          Write-Host "GitVersion.InformationalVersion: $(GitVersion.InformationalVersion)"


# Debug Value Check
- stage: SetupValidatorStage
  displayName: 'Setup Validator Stage'
  dependsOn: 
   - SetupStage
  condition: succeeded()
  jobs:
  - job: LogVariablesJob
    displayName: 'Log Variables Job'
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      environmentName: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.releaseTag'] ]
      runRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.runRelease'] ]
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseTag'] ]
      isPreRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.isPreRelease'] ]
    steps:
    - task: PowerShell@2
      displayName: Read Parameters
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "deployChocolatey: ${{ parameters.deployChocolatey }}"
          Write-Host "deployDocs: ${{ parameters.deployDocs }}"
          Write-Host "deployMarketplace: ${{ parameters.deployMarketplace }}"
          Write-Host "deployWinget: ${{ parameters.deployWinget }}"
    - task: PowerShell@2
      displayName: Read Variables
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "environmentName: $(environmentName)"
          Write-Host "releaseTag: $(releaseTag)"
          Write-Host "runRelease: $(runRelease)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.PreReleaseTag: $(GitVersion.PreReleaseTag)"
          Write-Host "isPreRelease: $(isPreRelease)"
          Write-Host "skipCompileTest: $(skipCompileTest)"


# Build, Test and Package
- stage: BuildStage
  displayName: 'Build Test & Package Stage'
  dependsOn: SetupStage
  condition: succeeded()
  jobs: 
  - job: BuildJob
    displayName: 'Build Test & Package job'
    condition:  and(succeeded(), eq(variables['skipCompileTest'], 'false'))
    pool:
      vmImage: 'windows-latest'
      demands:
      - npm
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.AssemblySemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.AssemblySemVer'] ]
      GitVersion.InformationalVersion: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.InformationalVersion'] ]
      GitVersion.NuGetVersion: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.NuGetVersion'] ]
      GitVersion.MajorMinorPatch: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.MajorMinorPatch'] ]
      GitVersion.PreReleaseNumber: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseNumber'] ]
    steps:
    - task: SonarCloudPrepare@2
      inputs:
        SonarCloud: 'Martins Sonar Cloud'
        organization: 'nkdagility'
        scannerMode: 'MSBuild'
        projectKey: 'vsts-sync-migrator:master'
        projectName: 'azure-devops-migration-tools'
        projectVersion: '$(GitVersion.SemVer)'

    - task: DotNetCoreCLI@2
      displayName: "Restore"
      inputs:
        command: 'restore'
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      displayName: "Complie"
      inputs:
        command: 'build'
        arguments: '/p:Version=$(GitVersion.AssemblySemVer) /p:FileVersion=$(GitVersion.AssemblySemVer) /p:InformationalVersion=$(GetVersion.InformationalVersion)'
    - task: DotNetCoreCLI@2
      displayName: "Test L0 & L1"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory=L0|TestCategory=L1)" --logger trx'
      continueOnError: true
    - task: DotNetCoreCLI@2
      displayName: "Test L2 & L3"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory=L2|TestCategory=L3)" --logger trx'
      continueOnError: true
    - task: DotNetCoreCLI@2
      displayName: "Test (other)"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory!=L0&TestCategory!=L1&TestCategory!=L2&TestCategory!=L3)" --logger trx'
      continueOnError: true

    - task: SonarCloudAnalyze@2
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'
      continueOnError: true

    - task: PublishSymbols@2
      inputs:
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: TeamServices
      continueOnError: true

    - task: PowerShell@2
      displayName: "Packaging (Executable)"
      inputs:
        filePath: '.\build\packageExecutable.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Extension)"
      inputs:
        filePath: '.\build\packageExtension.ps1'
        arguments: '-version $(GitVersion.AssemblySemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Chocolatey)"
      inputs:
        filePath: '.\build\packageChocolatey.ps1'
        arguments: '-SemVer $(GitVersion.SemVer) -NuGetVersion $(GitVersion.NuGetVersion) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Winget)"
      inputs:
        filePath: '.\build\packageWinget.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: SonarCloudPublish@2
      inputs:
        pollingTimeoutSec: '300'

  - job: BuildSimulationJob
    displayName: 'Build Simulation Job'
    condition:  and(succeeded(), eq(variables['skipCompileTest'], 'true'))
    pool:
      vmImage: 'windows-latest'
      demands:
      - npm
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.AssemblySemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.AssemblySemVer'] ]
      GitVersion.InformationalVersion: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.InformationalVersion'] ]
      GitVersion.MajorMinorPatch: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.MajorMinorPatch'] ]
    steps:
      - task: PowerShell@2
        displayName: Create fake build assets
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Run Simulation Build"
             Write-Host "##vso[task.setvariable variable=fakeBuildAssets;]true"
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "MigrationTools-$(GitVersion.SemVer).zip" -ItemType "file" -Force
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "nkdAgility.vsts-sync-migration-$(GitVersion.SemVer).vsix" -ItemType "file" -Force
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "MigrationTools.$(GitVersion.MajorMinorPatch).nupkg" -ItemType "file" -Force
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "vsts-sync-migration-$(GitVersion.SemVer).zip" -ItemType "file" -Force
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

# Docs Build
- stage: DocsBuildStage
  displayName: 'Docs Build Stage'
  dependsOn: 
   - SetupStage
  condition:  succeeded()
  jobs:
  - job: JekyllBuildJob
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      environmentName: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.releaseTag'] ]
      runRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.runRelease'] ]
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: UseRubyVersion@0
      inputs:
        versionSpec: '>= 3.0.7'
        addToPath: true
    - task: PowerShell@2
      displayName: Folders
      inputs:
        targetType: 'inline'
        enabled: $[ eq(variables['System.Debug'], true) ]
        script: |
          Write-Host "DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          Write-Host "ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
          Write-Host "Find all: *.md"
          Get-ChildItem -Path *.md -Recurse -File | Select-Object FullName
          Write-Host "Find all: *.html"
          Get-ChildItem -Path *.html -Recurse -File | Select-Object FullName
    - task: replacetokens@6
      name: ReplaceTokens
      inputs:
        sources: |
          **/*.md
          **/*.html
          /docs/_includes/header.html
        additionalVariables: |
          - GitVersion.SemVer: '$(GitVersion.SemVer)'
        addBOM: true
        ifNoFilesFound: error
    - task: PowerShell@2
      displayName: Output
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          Write-Host  "defaults  : $(ReplaceTokens.defaults)"
          Write-Host  "files     : $(ReplaceTokens.files)"
          Write-Host  "replaced  : $(ReplaceTokens.replaced)"
          Write-Host  "tokens    : $(ReplaceTokens.tokens)"
          Write-Host  "transforms: $(ReplaceTokens.transforms)"
    - script: |
        gem install jekyll bundler
        bundle install --retry=3 --jobs=4
      displayName: 'bundle install'
    - script: |
        bundle install
        bundle exec jekyll build
      displayName: 'jekyll'
    - task: CopyFiles@2
      condition: succeeded()
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '_site'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      condition: succeeded()
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: site


# Release to GitHub Releases
- stage: GitHubReleaseStage
  displayName: 'GitHub Release Stage'
  dependsOn: 
   - BuildStage
   - SetupStage
  condition:  and(succeeded(), eq(dependencies.SetupStage.outputs['ConfigJob.VersionOut.runRelease'], true))
  jobs:
  - job: GitHubReleaseJob
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.releaseTag'] ]
      runRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.runRelease'] ]
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseTag'] ]
      isPreRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.isPreRelease'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      displayName: Create fake build assets
      inputs:
        targetType: 'inline'
        script: |
          Install-Module -Name PowerShellForGitHub -AcceptLicense -Force 
          Write-Host "Imported Module PowerShellForGitHub "
          $pulls = Get-GitHubPullRequest -OwnerName nkdAgility -RepositoryName azure-devops-migration-tools -State Closed -Base main
          Write-Host "Found $($pulls.Count) pull requests on Preview"
          $pulls | ForEach-Object {Write-Host $_.title}
          Write-Host "----------"
          $VERSIONMESSAGE = $env:BUILD_SOURCEVERSIONMESSAGE
          $VERSIONMESSAGE = $VERSIONMESSAGE.Substring(0, $VERSIONMESSAGE.LastIndexOf(" (#"))
          Write-Host "Looking for '$($VERSIONMESSAGE)'"
          $pull = $pulls | Where-Object {$_.title -eq $VERSIONMESSAGE}
          if ($pull -eq $null) {
              Write-Host "No PR found for '$($VERSIONMESSAGE)'"
              exit 0
          }
          Write-Host "Found PR $($pull.PullRequestNumber) <---"
          $encoded_string = $pull.body -replace "`r`n", "\\n"
          Write-Host "##vso[task.setvariable variable=prbody;]$encoded_string"

    - task: GitHubRelease@1
      displayName: 'GitHub release (create)'
      inputs:
        gitHubConnection: 'GitHub connection 4'
        tagSource: userSpecifiedTag
        tag: 'v$(Build.BuildNumber)'
        title: 'Azure DevOps Migration Tools v$(Build.BuildNumber)'
        releaseNotesSource: inline
        releaseNotesInline: |
          $(prbody)
        assets: | 
          $(System.ArtifactsDirectory)/drop/*.zip
          $(System.ArtifactsDirectory)/drop/*.vsix
          $(System.ArtifactsDirectory)/drop/*.nupkg
        changeLogType: issueBased
        isPreRelease: $(isPreRelease)

    - task: PowerShell@2
      displayName: Create GitHub Release
      enabled: false
      inputs:
        filePath: '.\build\releaseGitHubRelease.ps1'
        arguments: '-version $(GitVersion.SemVer) -artifactFolder "$(System.ArtifactsDirectory)" -releaseTag $(releaseTag) -GH_TOKEN $(GH_TOKEN)' 

# Release to Azure DevOps Extension Marketplace
- stage: ReleaseMarketplaceStage
  displayName: 'Marketplace Release Stage'
  dependsOn: 
   - GitHubReleaseStage
   - SetupStage
  condition:  and(succeeded(), eq(dependencies.SetupStage.outputs['ConfigJob.VersionOut.releaseTag'], 'Release'), eq(${{ parameters.deployMarketplace }}, true))
  jobs:
  - job: MarketplaceJob
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.releaseTag'] ]
      runRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.runRelease'] ]
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: ms-devlabs.vsts-developer-tools-build-tasks.tfx-installer-build-task.TfxInstaller@4
      displayName: 'Use Node CLI for Azure DevOps (tfx-cli): v0.7.x'
      inputs:
        version: v0.7.x
    - task: ms-devlabs.vsts-developer-tools-build-tasks.publish-extension-build-task.PublishAzureDevOpsExtension@4
      displayName: 'Publish Extension'
      inputs:
        connectedServiceName: 'nkdAgility-Marketplace'
        fileType: vsix
        vsixFile: '$(System.ArtifactsDirectory)/drop/nkdAgility.vsts-sync-migration-$(GitVersion.SemVer).vsix'

# Release to Chocolatey Community Repository
- stage: ChocolateyReleaseStage
  displayName: 'Chocolatey Release Stage'
  dependsOn: 
   - GitHubReleaseStage
   - SetupStage
  condition:  and(succeeded(), or(eq(dependencies.SetupStage.outputs['ConfigJob.VersionOut.runRelease'], true), eq(${{ parameters.deployChocolatey }}, true)))
  jobs:
  - job: ChocoReleaseJob
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.releaseTag'] ]
      runRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.runRelease'] ]
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.NuGetVersion: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.NuGetVersion'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: NuGetCommand@2
      displayName: 'NuGet push'
      inputs:
        command: push
        packagesToPush: '$(System.ArtifactsDirectory)\**\*vsts-sync-migrator.*.nupkg'
        nuGetFeedType: external
        publishFeedCredentials: Chocolate.org

# Release to Winget package Repository
- stage: WingetReleaseStage
  displayName: 'Winget Release Stage'
  dependsOn: 
   - GitHubReleaseStage
   - SetupStage
  condition:  and(succeeded(), or(eq(dependencies.SetupStage.outputs['ConfigJob.VersionOut.runRelease'], true), eq(${{ parameters.deployWinget }}, true)))
  jobs:
  - job: WingetReleaseJob
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.releaseTag'] ]
      runRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.runRelease'] ]
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      displayName: Create Winget Release
      inputs:
        filePath: 'build/releaseWingetPackage.ps1'
        arguments: '-version $(GitVersion.SemVer) -releaseTag $(releaseTag) -GH_TOKEN $(GH_TOKEN)' 
         
# Documentation release Stage
- stage: DocsReleaseStage
  displayName: 'Docs Release Stage'
  dependsOn: 
   - GitHubReleaseStage
   - DocsBuildStage
   - SetupStage
  condition:  and(succeeded(), or(eq(dependencies.SetupStage.outputs['ConfigJob.VersionOut.runRelease'], true), eq(${{ parameters.deployDocs }}, true)))
  jobs:
  - job: DocsReleaseJob
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.releaseTag'] ]
      runRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.runRelease'] ]
      GitVersion.SemVer: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.SetupStage.ConfigJob.outputs['GitVersion.PreReleaseTag'] ]
      isPreRelease: $[ stageDependencies.SetupStage.ConfigJob.outputs['VersionOut.isPreRelease'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'site'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      displayName: Select Directory
      name: SetRemoteDirectory
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "isPreRelease(incomming): $(isPreRelease)";
          $isPreRelease = "$(isPreRelease)" -eq "true";
          Write-Host "isPreRelease: $isPreRelease";
          Write-Host "isPreRelease(type): $isPreRelease.GetType().Name";

          if ($isPreRelease)
          {
            Write-Host "PreRelease"
            $remoteDirectory = "./azure-devops-migration-tools/preview/"
          } else {
            Write-Host "Release"
            $remoteDirectory = "./azure-devops-migration-tools/"
          }
          Write-Host "Remote Path: $remoteDirectory"
          Write-Host "##vso[task.setvariable variable=remoteDirectory;isOutput=true]$remoteDirectory"
    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: 'nakedalmweb-learn'
        sourceFolder: '$(System.ArtifactsDirectory)/site'
        contents: '**'
        targetFolder: $(SetRemoteDirectory.remoteDirectory)