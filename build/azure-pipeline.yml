# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- preview
- master

name: $(GITVERSION_SemVer)

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  skipCompileTest: true

# Versioning of repo

stages:
- stage: Versioning
  displayName: 'Versioning'
  jobs: 
  - job: VersionJob
    displayName: 'Version job'
    pool:
      vmImage: 'windows-latest'
    variables:
      Agent.Source.Git.ShallowFetchDepth: 0
    steps:
    - task: gitversion/setup@1
      inputs:
        versionSpec: '5.x'
    - task: gitversion/execute@1
      displayName: 'GitVersion'
      name: GitVersion
      inputs:
        updateAssemblyInfo: true
    - task: PowerShell@2
      displayName: GetVersion Data Check
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |     
          Write-Host "GITVERSION.SemVer: $(GITVERSION.SemVer)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.AssemblySemVer: $(GitVersion.AssemblySemVer)"
          Write-Host "GitVersion.InformationalVersion: $(GitVersion.InformationalVersion)"

# Build, Test and Package

- stage: Build
  displayName: 'Build Test & Package'
  dependsOn: Versioning
  condition:  and(succeeded(), eq(variables['skipCompileTest'], 'false'))
  jobs: 
  - job: BuildJob
    displayName: 'Build job'
    pool:
      vmImage: 'windows-latest'
      demands:
      - npm
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GitVersion.SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      GitVersion.AssemblySemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.AssemblySemVer'] ]
      GitVersion.InformationalVersion: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.InformationalVersion'] ]
    steps:
    - task: SonarCloudPrepare@2
      inputs:
        SonarCloud: 'Martins Sonar Cloud'
        organization: 'nkdagility'
        scannerMode: 'MSBuild'
        projectKey: 'vsts-sync-migrator:master'
        projectName: 'azure-devops-migration-tools'
        projectVersion: '$(GitVersion.SemVer)'

    - task: DotNetCoreCLI@2
      displayName: "Restore"
      inputs:
        command: 'restore'
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      displayName: "Complie"
      inputs:
        command: 'build'
        arguments: '/p:Version=$(GitVersion.AssemblySemVer) /p:FileVersion=$(GitVersion.AssemblySemVer) /p:InformationalVersion=$(GetVersion.InformationalVersion)'
    - task: DotNetCoreCLI@2
      displayName: "Test L0 & L1"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory=L0|TestCategory=L1)" --logger trx'
      continueOnError: true
    - task: DotNetCoreCLI@2
      displayName: "Test L2 & L3"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory=L2|TestCategory=L3)" --logger trx'
      continueOnError: true
    - task: DotNetCoreCLI@2
      displayName: "Test (other)"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory!=L0&TestCategory!=L1&TestCategory!=L2&TestCategory!=L3)" --logger trx'
      continueOnError: true

    - task: SonarCloudAnalyze@2
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'
      continueOnError: true

    - task: PublishSymbols@2
      inputs:
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: TeamServices
      continueOnError: true

    - task: PowerShell@2
      displayName: "Packaging (Executable)"
      inputs:
        filePath: '.\build\packageExecutable.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Extension)"
      inputs:
        filePath: '.\build\packageExtension.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Chocolatey)"
      inputs:
        filePath: '.\build\packageChocolatey.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Nuget)"
      inputs:
        filePath: '.\build\packageNuget.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Winget)"
      inputs:
        filePath: '.\build\packageWinget.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: SonarCloudPublish@2
      inputs:
        pollingTimeoutSec: '300'

# Release to GitHub Releases

- stage: ReleaseGitHub
  displayName: 'Release to GitHub Releases'
  dependsOn: Build
  condition:  or(succeeded(), eq(variables['skipCompileTest'], 'true'))
  # condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/preview'))
  jobs:
  - deployment: GitHubRelease
    environment: AzureDevOpsMigrationTools-Release
    pool:
      vmImage: 'windows-latest'
    variables:
      SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            condition: and(succeeded(), eq(variables['doCompileTest'], 'true'))
            artifact: drop
          - script: echo Hi $(SemVer) !

# Release to Azure DevOps Extension Marketplace

- stage: ReleaseExtension
  displayName: 'Release to Azure DevOps Extension Marketplace'
  dependsOn: ReleaseGitHub
  condition:  or(succeeded(), eq(variables['skipCompileTest'], 'true'))
  # condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/preview'))
  jobs:
  - deployment: tfxcliRelease
    environment: AzureDevOpsMigrationTools-Release
    pool:
      vmImage: 'windows-latest'
    variables:
      SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            condition: and(succeeded(), eq(variables['doCompileTest'], 'true'))
            artifact: drop
          - script: echo Hi $(SemVer) !

# Release to Chocolatey Community Repository

- stage: ReleaseChocolatey
  displayName: 'Release to Chocolatey Community Repository'
  dependsOn: ReleaseGitHub
  condition:  or(succeeded(), eq(variables['skipCompileTest'], 'true'))
  # condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/preview'))
  jobs:
  - deployment: ChocoRelease
    environment: AzureDevOpsMigrationTools-Release
    pool:
      vmImage: 'windows-latest'
    variables:
      SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            condition: and(succeeded(), eq(variables['doCompileTest'], 'true'))
            artifact: drop
          - script: echo Hi $(SemVer) !

# Release to Winget package Repository

- stage: ReleaseWinget
  displayName: 'Release to Winget package Repository'
  dependsOn: ReleaseGitHub
  condition: or(succeeded(), eq(variables['skipCompileTest'], 'true'))
  # condition:  and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/preview'))
  jobs:
  - deployment: WingetRelease
    environment: AzureDevOpsMigrationTools-Release
    pool:
      vmImage: 'windows-latest'
    variables:
      SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            condition: and(succeeded(), eq(variables['doCompileTest'], 'true'))
            artifact: drop
          - script: echo Hi $(SemVer) !