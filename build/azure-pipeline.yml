# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- preview
- master

name: $(GITVERSION_SemVer)

## TODO: THESE WILL NOT WORK! NEED TO USE Versioning Reference instead with $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  skipCompileTest: false

# Versioning of repo

stages:

# Versioning

- stage: Versioning
  displayName: 'Versioning'
  jobs: 
  - job: VersionJob
    displayName: 'Version job'
    pool:
      vmImage: 'windows-latest'
    variables:
      Agent.Source.Git.ShallowFetchDepth: 0
    steps:
    - task: gitversion/setup@1
      inputs:
        versionSpec: '5.x'
    - task: gitversion/execute@1
      displayName: 'GitVersion'
      name: GitVersion
      inputs:
        updateAssemblyInfo: true
    - task: PowerShell@2
      displayName: Set Environment Variables
      name: VersionOut
      inputs:
        targetType: 'inline'
        script: |
          $releaseTag = "Dev";
          Write-Host "##vso[task.setvariable variable=environmentName;isoutput=true]AzureDevOpsMigrationTools-Dev"
          Write-Host "##vso[task.setvariable variable=releaseTag;isoutput=true]Dev"
          Write-Host "##vso[task.setvariable variable=isRelease;isoutput=true]false"
          Write-Host "##vso[task.setvariable variable=isPreview;isoutput=true]false"
          Write-Host "##vso[task.setvariable variable=shouldDeploy;isoutput=true]false"

          if ("$(GitVersion.PreReleaseTag)" -eq "")
          {
            $releaseTag = "Release";
            Write-Host "##vso[task.setvariable variable=environmentName;isoutput=true]AzureDevOpsMigrationTools-Release"
            Write-Host "##vso[task.setvariable variable=releaseTag;isoutput=true]Release"
            Write-Host "##vso[task.setvariable variable=isRelease;isoutput=true]true"
            Write-Host "##vso[task.setvariable variable=isPreview;isoutput=true]false"
            Write-Host "##vso[task.setvariable variable=shouldDeploy;isoutput=true]true"
          }
          if ("$(GitVersion.PreReleaseLabel)" -contains "Preview")
          {
            $releaseTag = "Preview";
            Write-Host "##vso[task.setvariable variable=environmmentName;isoutput=true]AzureDevOpsMigrationTools-Preview"
            Write-Host "##vso[task.setvariable variable=releaseTag;isoutput=true]Preview"
            Write-Host "##vso[task.setvariable variable=isRelease;isoutput=true]false"
            Write-Host "##vso[task.setvariable variable=isPreview;isoutput=true]true"
            Write-Host "##vso[task.setvariable variable=shouldDeploy;isoutput=true]true"
          }
          Write-Host "##vso[build.addbuildtag]$releaseTag"

          # Output the variables for debugging
          Write-Host "GITVERSION.PreReleaseLabel: $(GITVERSION.PreReleaseLabel)"
          Write-Host "GITVERSION.SemVer: $(GITVERSION.SemVer)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.AssemblySemVer: $(GitVersion.AssemblySemVer)"
          Write-Host "GitVersion.InformationalVersion: $(GitVersion.InformationalVersion)"

# Build, Test and Package

- stage: Build
  displayName: 'Build Test & Package'
  dependsOn: Versioning
  condition: succeeded()
  jobs: 
  - job: BuildJob
    displayName: 'Build job'
    condition:  and(succeeded(), eq(variables['skipCompileTest'], 'false'))
    pool:
      vmImage: 'windows-latest'
      demands:
      - npm
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GitVersion.SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      GitVersion.AssemblySemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.AssemblySemVer'] ]
      GitVersion.InformationalVersion: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.InformationalVersion'] ]
    steps:
    - task: SonarCloudPrepare@2
      inputs:
        SonarCloud: 'Martins Sonar Cloud'
        organization: 'nkdagility'
        scannerMode: 'MSBuild'
        projectKey: 'vsts-sync-migrator:master'
        projectName: 'azure-devops-migration-tools'
        projectVersion: '$(GitVersion.SemVer)'

    - task: DotNetCoreCLI@2
      displayName: "Restore"
      inputs:
        command: 'restore'
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      displayName: "Complie"
      inputs:
        command: 'build'
        arguments: '/p:Version=$(GitVersion.AssemblySemVer) /p:FileVersion=$(GitVersion.AssemblySemVer) /p:InformationalVersion=$(GetVersion.InformationalVersion)'
    - task: DotNetCoreCLI@2
      displayName: "Test L0 & L1"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory=L0|TestCategory=L1)" --logger trx'
      continueOnError: true
    - task: DotNetCoreCLI@2
      displayName: "Test L2 & L3"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory=L2|TestCategory=L3)" --logger trx'
      continueOnError: true
    - task: DotNetCoreCLI@2
      displayName: "Test (other)"
      inputs:
        command: 'test'
        arguments: '--collect "Code coverage" --no-build --filter "(TestCategory!=L0&TestCategory!=L1&TestCategory!=L2&TestCategory!=L3)" --logger trx'
      continueOnError: true

    - task: SonarCloudAnalyze@2
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'
      continueOnError: true

    - task: PublishSymbols@2
      inputs:
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: TeamServices
      continueOnError: true

    - task: PowerShell@2
      displayName: "Packaging (Executable)"
      inputs:
        filePath: '.\build\packageExecutable.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Extension)"
      inputs:
        filePath: '.\build\packageExtension.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Chocolatey)"
      inputs:
        filePath: '.\build\packageChocolatey.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Nuget)"
      inputs:
        filePath: '.\build\packageNuget.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 
    - task: PowerShell@2
      displayName: "Packaging (Winget)"
      inputs:
        filePath: '.\build\packageWinget.ps1'
        arguments: '-version $(GitVersion.SemVer) -outfolder "$(Build.ArtifactStagingDirectory)"' 

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: SonarCloudPublish@2
      inputs:
        pollingTimeoutSec: '300'

  - job: "BuildSimulationJob"
    displayName: 'Build Simulation Job'
    condition:  and(succeeded(), eq(variables['skipCompileTest'], 'true'))
    pool:
      vmImage: 'windows-latest'
      demands:
      - npm
    variables:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GitVersion.SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      GitVersion.AssemblySemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.AssemblySemVer'] ]
      GitVersion.InformationalVersion: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.InformationalVersion'] ]
      GitVersion.MajorMinorPatch: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.MajorMinorPatch'] ]
    steps:
      - task: PowerShell@2
        displayName: Create fake build assets
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Run Simulation Build"
             Write-Host "##vso[task.setvariable variable=fakeBuildAssets;]true"
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "MigrationTools-$(GitVersion.SemVer).zip" -ItemType "file" -Force
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "nkdAgility.vsts-sync-migration-$(GitVersion.SemVer).vsix" -ItemType "file" -Force
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "MigrationTools.$(GitVersion.MajorMinorPatch).nupkg" -ItemType "file" -Force
            New-Item -Path $(Build.ArtifactStagingDirectory) -Name "vsts-sync-migration-$(GitVersion.SemVer).zip" -ItemType "file" -Force
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

# Release to GitHub Releases

- stage: ReleaseGitHub
  displayName: 'Release to GitHub Releases'
  dependsOn: 
   - Build
   - Versioning
  condition:  and(succeeded(), or(eq(dependencies.Versioning.outputs['VersionOut.releaseTag'], 'Release'), eq(dependencies.Versioning.outputs['VersionOut.releaseTag'], 'Preview')))
  jobs:
  - job: GitHubRelease
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.releaseTag'] ]
      isRelease: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isRelease'] ]
      isPreview: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isPreview'] ]
      shouldDeploy: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.shouldDeploy'] ]
      GitVersion.SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      displayName: Read Environment Variables
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "environmentName: $(environmentName)"
          Write-Host "releaseTag: $(releaseTag)"
          Write-Host "isRelease: $(isRelease)"
          Write-Host "isPreview: $(isPreview)"
          Write-Host "shouldDeploy: $(shouldDeploy)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.PreReleaseTag: $(GitVersion.PreReleaseTag)"
    - task: PowerShell@2
      displayName: Create GitHub Release
      inputs:
        filePath: '.\build\releaseGitHubRelease.ps1'
        arguments: '-version $(GitVersion.SemVer) -artifactFolder "$(System.ArtifactsDirectory)" -releaseTag $(releaseTag) -GH_TOKEN $(GH_TOKEN)' 

# Release to Azure DevOps Extension Marketplace

- stage: ReleaseExtension
  displayName: 'Release to Azure DevOps Extension Marketplace'
  dependsOn: 
   - ReleaseGitHub
   - Versioning
  condition:  succeeded()
  # condition:  and(succeeded(), eq(dependencies.Versioning.outputs['VersionOut.releaseTag'], 'Release'))
  jobs:
  - job: tfxcliRelease
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.releaseTag'] ]
      isRelease: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isRelease'] ]
      isPreview: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isPreview'] ]
      shouldDeploy: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.shouldDeploy'] ]
      GitVersion.SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      displayName: Read Environment Variables
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "environmentName: $(environmentName)"
          Write-Host "releaseTag: $(releaseTag)"
          Write-Host "isRelease: $(isRelease)"
          Write-Host "isPreview: $(isPreview)"
          Write-Host "shouldDeploy: $(shouldDeploy)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.PreReleaseTag: $(GitVersion.PreReleaseTag)"

# Release to Chocolatey Community Repository

- stage: ReleaseChocolatey
  displayName: 'Release to Chocolatey Community Repository'
  dependsOn: 
   - ReleaseGitHub
   - Versioning
  condition:  succeeded()
  # condition:  and(succeeded(), eq(variables['shouldDeploy'], 'true'))
  jobs:
  - job: ChocoRelease
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.releaseTag'] ]
      isRelease: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isRelease'] ]
      isPreview: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isPreview'] ]
      shouldDeploy: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.shouldDeploy'] ]
      GitVersion.SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      displayName: Read Environment Variables
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "environmentName: $(environmentName)"
          Write-Host "releaseTag: $(releaseTag)"
          Write-Host "isRelease: $(isRelease)"
          Write-Host "isPreview: $(isPreview)"
          Write-Host "shouldDeploy: $(shouldDeploy)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.PreReleaseTag: $(GitVersion.PreReleaseTag)"

# Release to Winget package Repository

- stage: ReleaseWinget
  displayName: 'Release to Winget package Repository'
  dependsOn: 
   - ReleaseGitHub
   - Versioning
  condition:  succeeded()
  # condition:  and(succeeded(), eq(variables['shouldDeploy'], 'true'))
  jobs:
  - job: WingetRelease
    pool:
      vmImage: 'windows-latest'
    variables:
      environmentName: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.environmentName'] ]
      releaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.releaseTag'] ]
      isRelease: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isRelease'] ]
      isPreview: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.isPreview'] ]
      shouldDeploy: $[ stageDependencies.Versioning.VersionJob.outputs['VersionOut.shouldDeploy'] ]
      GitVersion.SemVer: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.SemVer'] ]
      GitVersion.PreReleaseTag: $[ stageDependencies.Versioning.VersionJob.outputs['GitVersion.PreReleaseTag'] ]
    steps:
    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: PowerShell@2
      displayName: Read Environment Variables
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "environmentName: $(environmentName)"
          Write-Host "releaseTag: $(releaseTag)"
          Write-Host "isRelease: $(isRelease)"
          Write-Host "isPreview: $(isPreview)"
          Write-Host "shouldDeploy: $(shouldDeploy)"
          Write-Host "GitVersion.SemVer: $(GitVersion.SemVer)"
          Write-Host "GitVersion.PreReleaseTag: $(GitVersion.PreReleaseTag)"