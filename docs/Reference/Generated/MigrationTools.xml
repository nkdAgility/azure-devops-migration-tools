<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MigrationTools</name>
    </assembly>
    <members>
        <member name="M:MigrationTools.DataContracts.Pipelines.BuildDefinition.ResetObject">
            <inheritdoc/>
        </member>
        <member name="M:MigrationTools.DataContracts.Pipelines.Process.ShouldSerializeYamlFilename">
            <summary>
            If the value is set, then serialize it, if it isn't don't
            </summary>
            <returns>bool on if the YamlFilename should be serialized.</returns>
        </member>
        <member name="M:MigrationTools.DataContracts.Pipelines.Process.ShouldSerializePhases">
            <summary>
            If the type is 1 then this is a classis pipeline, so the phases should be serialized.
            </summary>
            <returns>bool on if the Phases should be serialized.</returns>
        </member>
        <member name="M:MigrationTools.DataContracts.Pipelines.ReleaseDefinition.ResetObject">
            <inheritdoc/>
        </member>
        <member name="M:MigrationTools.DataContracts.RestApiDefinition.ResetObject">
            <summary>
            reset values that cannot be set on new objects
            </summary>
            <returns>The clean RestApiDefinition</returns>
        </member>
        <member name="M:MigrationTools.DataContracts.RestApiDefinition.HasTaskGroups">
            <summary>
            Checks whether the Definition references Taskgroups
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:MigrationTools.DataContracts.RestApiDefinition.HasVariableGroups">
            <summary>
            Checks whether the Definition references Variablegroups
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:MigrationTools.Enrichers.IEnricherOptions.Enabled">
            <summary>
            Active the enricher if it true.
            </summary>
        </member>
        <member name="P:MigrationTools.Options.IOptions.RefName">
            <summary>
            If you set a `RefName` then this configration will be added to a Catalog of configurations that can be refernced using tha `RefName` so tha tyou dont have to keep adding the ame items with the same configuration.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.IProcessorOptions.SourceName">
            <summary>
            This is the `IEndpoint` that will be used as the source of the Migration. Can be null for a write only processor.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.IProcessorOptions.TargetName">
            <summary>
            This is the `IEndpoint` that will be used as the Target of the Migration. Can be null for a read only processor.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.IProcessorOptions.ProcessorEnrichers">
            <summary>
            List of Enrichers that can be used to add more features to this processor. Only works with Native Processors and not legacy Processors.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.ProcessorOptions.Enabled">
            <summary>
            If set to `true` then the processor will run. Set to `false` and the processor will not run.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.ProcessorOptions.ProcessorEnrichers">
            <summary>
            List of Enrichers that can be used to add more features to this processor. Only works with Native Processors and not legacy Processors.
            </summary>
        </member>
        <member name="P:MigrationTools.Processors.ProcessorOptions.RefName">
            <summary>
            `Refname` will be used in the future to allow for using named Options without the need to copy all of the options.
            </summary>
        </member>
        <member name="T:MigrationTools.Processors.WorkItemTrackingProcessor">
            <summary>
            This processor is intended, with the aid of [ProcessorEnrichers](../ProcessorEnrichers/index.md), to allow the migration of Work Items between two [Endpoints](../Endpoints/index.md).
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.IProcessorConfig.Enabled">
            <summary>
            Active the processor if it true.
            </summary>
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.IProcessorConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <summary>
            Indicates, if this processor can be added to the list of current processors or not.
            Some processors are not compatible with each other.
            </summary>
            <param name="otherProcessors">List of already configured processors.</param>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.IWorkItemProcessorConfig.WIQLOrderBit">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.ExportProfilePictureFromADConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.ExportProfilePictureFromADConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.ExportProfilePictureFromADConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.FakeProcessorConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.FakeProcessorConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.FakeProcessorConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.FixGitCommitLinksConfig.OrderBit">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.FixGitCommitLinksConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.ImportProfilePictureConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.ImportProfilePictureConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.ImportProfilePictureConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TeamMigrationConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TeamMigrationConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.TeamMigrationConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TestConfigurationsMigrationConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TestConfigurationsMigrationConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.TestConfigurationsMigrationConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TestPlansAndSuitesMigrationConfig.RemoveInvalidTestSuiteLinks">
            <summary>
            Remove Invalid Links, see https://github.com/nkdAgility/azure-devops-migration-tools/issues/178
            </summary>
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.TestPlansAndSuitesMigrationConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TestVariablesMigrationConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.TestVariablesMigrationConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.TestVariablesMigrationConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.WorkItemDeleteConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.ReplayRevisions">
            <summary>
            You can choose to migrate the tip only (a single write) or all of the revisions (many writes).
            If you are setting this to `false` to migrate only the tip then you should set `BuildFieldTable` to `true`
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.PrefixProjectToNodes">
            <summary>
            Prefix your iterations and areas with the project name. If you have enabled this in `NodeStructuresMigrationConfig` you must do it here too.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.UpdateCreatedDate">
            <summary>
            If this is enabled the creation process on the target project will create the items with the original creation date.
            (Important: The item history is always pointed to the date of the migration, it's change only the data column CreateDate,
            not the internal create date)
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.UpdateCreatedBy">
            <summary>
            If this is enabled the creation process on the target project will create the items with the original creation date.
            (Important: The item history is always pointed to the date of the migration, it's change only the data column CreateDate,
            not the internal create date)
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.WIQLQueryBit">
            <summary>
            A work item query based on WIQL to select only important work items. To migrate all leave this empty. See [WIQL Query Bits](#wiql-query-bits)
            </summary>
            <default>AND  [Microsoft.VSTS.Common.ClosedDate] = '' AND [System.WorkItemType] NOT IN ('Test Suite', 'Test Plan','Shared Steps','Shared Parameter','Feedback Request')</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.WIQLOrderBit">
            <summary>
            A work item query to affect the order in which the work items are migrated. Don't leave this empty.
            </summary>
            <default>[System.ChangedDate] desc</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.Enabled">
            <summary>
            If enabled then the processor will run
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.Processor">
            <summary>
            Name used to identify this processor
            </summary>
            <default>?</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.LinkMigration">
            <summary>
            If enabled this will migrate the Links for the work item at the same time as the whole work item.
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.AttachmentMigration">
            <summary>
            If enabled this will migrate all of the attachments at the same time as the work item
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.AttachmentWorkingPath">
            <summary>
            `AttachmentMigration` is set to true then you need to specify a working path for attachments to be saved locally.
            </summary>
            <default>C:\temp\Migration\</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.FixHtmlAttachmentLinks">
            <summary>
            **beta** If enabled this will fix any image attachments URL's, work item mention URL's or user mentions in the HTML
            fields as well as discussion comments. You must specify a PersonalAccessToken in the Source project for Azure DevOps;
            TFS should use integrated authentication.
            </summary>
            <default>?</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.SkipToFinalRevisedWorkItemType">
            <summary>
            **beta** If enabled this will fix any image attachments URL's, work item mention URL's or user mentions in the HTML fields as well as discussion comments. You must specify a
            PersonalAccessToken in the Source project for Azure DevOps; TFS should use integrated authentication.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.WorkItemCreateRetryLimit">
            <summary>
            **beta** If set to a number greater than 0 work items that fail to save will retry after a number of seconds equal to the retry count.
            This allows for periodic network glitches not to end the process.
            </summary>
            <default>5</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.FilterWorkItemsThatAlreadyExistInTarget">
            <summary>
            This loads all of the work items already saved to the Target and removes them from the Source work item list prior to commencing the run.
            While this may take some time in large data sets it reduces the time of the overall migration significantly if you need to restart.
            </summary>
            <default>true</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.PauseAfterEachWorkItem">
            <summary>
            Pause after each work item is migrated
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.AttachmentMaxSize">
            <summary>
            `AttachmentMigration` is set to true then you need to specify a max file size for upload in bites.
            For Azure DevOps Services the default is 480,000,000 bites (60mb), for TFS its 32,000,000 bites (4mb).
            </summary>
            <default>480000000</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.AttachRevisionHistory">
            <summary>
            This will create a json file with the revision history and attach it to the work item. Best used with `MaxRevisions` or `ReplayRevisions`.
            </summary>
            <default>?</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.LinkMigrationSaveEachAsAdded">
            <summary>
            If you have changed parents before re-running a sync you may get a `TF26194: unable to change the value of the 'Parent' field` error.
            This will resolve it, but will slow migration.
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.GenerateMigrationComment">
            <summary>
            If enabled, adds a comment recording the migration
            </summary>
            <default>false</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.WorkItemIDs">
            <summary>
            A list of work items to import
            </summary>
            <default>[]</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.MaxRevisions">
            <summary>
            Sets the maximum number of revisions that will be migrated. "First + Last N = Max".
            If this was set to 5 and there were 10 revisions you would get the first 1 (creation) and the latest 4 migrated.
            </summary>
            <default>0</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.NodeStructureEnricherEnabled">
            <summary>
            
            </summary>
            <default>?</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.UseCommonNodeStructureEnricherConfig">
            <summary>
            
            </summary>
            <default>?</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.StopMigrationOnMissingAreaIterationNodes">
            <summary>
            
            </summary>
            <default>?</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.NodeBasePaths">
            <summary>
            The root paths of the Ares / Iterations you want migrate. See [NodeBasePath Configuration](#nodebasepath-configuration)
            </summary>
            <default>["/"]</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.AreaMaps">
            <summary>
            Remapping rules for area paths, implemented with regular expressions. The rules apply with a higher priority than the `PrefixProjectToNodes`,
            that is, if no rule matches the path and the `PrefixProjectToNodes` option is enabled, then the old `PrefixProjectToNodes` behavior is applied.
            </summary>
            <default>{}</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.IterationMaps">
            <summary>
            Remapping rules for iteration paths, implemented with regular expressions. The rules apply with a higher priority than the `PrefixProjectToNodes`,
            that is, if no rule matches the path and the `PrefixProjectToNodes` option is enabled, then the old `PrefixProjectToNodes` behavior is applied.
            </summary>
            <default>{}</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.MaxGracefulFailures">
            <summary>
            The maximum number of failures to tolerate before the migration fails. When set above zero, a work item migration error is logged but the migration will
            continue until the number of failed items reaches the configured value, after which the migration fails.
            </summary>
            <default>0</default>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.SkipRevisionWithInvalidIterationPath">
            <summary>
            This will skip a revision if the source iteration has not been migrated i.e. it was deleted
            </summary>
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.WorkItemMigrationConfig.#ctor">
            <summary>
            Creates a new workitemmigrationconfig with default values
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemPostProcessingConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemPostProcessingConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.WorkItemPostProcessingConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="F:MigrationTools._EngineV1.Configuration.Processing.WorkItemQueryMigrationConfig.sharedFolderName">
            <summary>
                The name of the shared folder, setting the default name
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemQueryMigrationConfig.PrefixProjectToNodes">
            <summary>
                Do we add the source project name into the folder path
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemQueryMigrationConfig.SharedFolderName">
            <summary>
                The name of the shared folder, made a parameter incase it every needs to be edited
            </summary>
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemQueryMigrationConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemQueryMigrationConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.WorkItemQueryMigrationConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemUpdateAreasAsTagsConfig.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MigrationTools._EngineV1.Configuration.Processing.WorkItemUpdateAreasAsTagsConfig.Processor">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.WorkItemUpdateAreasAsTagsConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Configuration.Processing.WorkItemUpdateConfig.IsProcessorCompatible(System.Collections.Generic.IReadOnlyList{MigrationTools._EngineV1.Configuration.IProcessorConfig})">
            <inheritdoc />
        </member>
        <member name="M:MigrationTools._EngineV1.Enrichers.EmbededImagesRepairEnricherBase.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger{MigrationTools._EngineV1.Enrichers.EmbededImagesRepairEnricherBase})">
            from https://gist.github.com/pietergheysens/792ed505f09557e77ddfc1b83531e4fb
        </member>
        <member name="M:MigrationTools._EngineV1.Enrichers.EmbededImagesRepairEnricherBase.GetImageFormat(System.Byte[])">
            <summary>
            Retrieve Image Format for a given byte array
            </summary>
            <param name="bytes">Image to check</param>
            <remarks>From https://stackoverflow.com/a/9446045/1317161</remarks>
            <returns>Image format</returns>
        </member>
    </members>
</doc>
