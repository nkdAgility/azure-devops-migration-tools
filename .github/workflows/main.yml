name: Build & Release (Azure DevOps Migration Tools)

on: 
  push:
  workflow_dispatch:

env:
   APP_ID: "Iv23li9aYvt0VW9x4Jhh"
   PRIVATE_KEY: ${{ secrets.NKDAGILITY_BOT_CLIENTSECRET }}

jobs:
  Setup:
    name: "Setup & Configuration"
    runs-on: ubuntu-latest
    outputs:
      GitVersion_BranchName: ${{ steps.gitversion.outputs.GitVersion_BranchName }}
      GitVersion_SemVer: ${{ steps.gitversion.outputs.GitVersion_SemVer }}
      GitVersion_PreReleaseLabel: ${{ steps.gitversion.outputs.GitVersion_PreReleaseLabel }}
      GitVersion_AssemblySemVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemVer }}
      GitVersion_InformationalVersion: ${{ steps.gitversion.outputs.GitVersion_InformationalVersion }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'
        includePrerelease: true
    - name: Execute GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        useConfigFile: true

  SetupValidatorStage:
    name: "Setup Validator"
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - name: "Release WorkItemClone"
        shell: pwsh
        run: |
            Write-Output "GitVersion_BranchName: ${{needs.Setup.outputs.GitVersion_BranchName}}"
            Write-Output "GitVersion_SemVer: ${{needs.Setup.outputs.GitVersion_SemVer}}"
            Write-Output "GitVersion_PreReleaseLabel: ${{needs.Setup.outputs.GitVersion_PreReleaseLabel}}"
            Write-Output "GitVersion_AssemblySemVer: ${{needs.Setup.outputs.GitVersion_AssemblySemVer}}"
            Write-Output "GitVersion_InformationalVersion: ${{needs.Setup.outputs.GitVersion_InformationalVersion}}"

  build:
    name: "Build .NET Framework App"
    runs-on: windows-latest
    needs: Setup
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GitVersion_AssemblySemVer: ${{ needs.Setup.outputs.GitVersion_AssemblySemVer }}
      GitVersion_InformationalVersion: ${{ needs.Setup.outputs.GitVersion_InformationalVersion }}
    steps:
      # - name: Setup NuGet
      #   uses: NuGet/setup-nuget@v1.0.2
      # - name: Restore NuGet Packages
      #   run: nuget restore MigrationTools.sln
      # - name: Build and Publish Web App
      #   run: msbuild MigrationTools.sln 
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - run: dotnet build MigrationTools.sln /p:Version=${{ env.GitVersion_AssemblySemVer }} /p:FileVersion=${{ env.GitVersion_AssemblySemVer }} /p:InformationalVersion=${{ env.GitVersion_InformationalVersion }}
      - uses: actions/upload-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild

          path: .\**

  test-fast:
    name: "Test L0 & L1"
    runs-on: windows-latest
    needs: build
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - run: dotnet test MigrationTools.sln --logger trx --collect "Code coverage" --no-build --filter "(TestCategory=L0|TestCategory=L1)"

  
  test-slow:
    name: "Test L2 & L3"
    runs-on: windows-latest
    needs: build
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - run: dotnet test MigrationTools.sln --logger trx --collect "Code coverage" --no-build --filter "(TestCategory=L2|TestCategory=L3)"
  
  test-long:
    name: "Test Other"
    runs-on: windows-latest
    needs: build
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - run: dotnet test MigrationTools.sln --logger trx --collect "Code coverage" --no-build --filter "(TestCategory!=L0&TestCategory!=L1&TestCategory!=L2&TestCategory!=L3)"
        
  BuildDocs:
    name: "Release to GitHub Wiki"
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/checkout@v3
  
  PackageChocolatey:
    name: "Package Chocolatey"
    runs-on: ubuntu-latest
    needs: [build, Setup, test-fast, test-slow, test-long]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
      - uses: actions/checkout@v4

  PackageMarketplace:
    name: "Package Marketplace"
    runs-on: ubuntu-latest
    needs: [build, Setup, test-fast, test-slow, test-long]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
      - uses: actions/checkout@v4

  GitHubRelease:
    name: "Release to GitHub Releases"
    runs-on: ubuntu-latest
    needs: [build, Setup, test-fast, test-slow, test-long, PackageChocolatey, PackageMarketplace]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
      - uses: actions/checkout@v4
  
  MarketplaceRelease:
    name: "Release to Marketplace"
    runs-on: ubuntu-latest
    needs: [Setup, GitHubRelease, PackageMarketplace]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
  
  ChocolateyRelease:
    name: "Release to Chocolatey"
    runs-on: ubuntu-latest
    needs: [Setup, GitHubRelease, PackageChocolatey]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }   

  WingetRelease:
    name: "Release to Winget"
    runs-on: ubuntu-latest
    needs: [Setup, GitHubRelease]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }

  DocsRelease:
    name: "Release to Docs"
    runs-on: ubuntu-latest
    needs: [BuildDocs, Setup, GitHubRelease]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }