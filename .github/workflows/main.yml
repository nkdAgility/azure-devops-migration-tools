name: Build & Release (Azure DevOps Migration Tools)

on: 
  push:
  workflow_dispatch:

env:
   APP_ID: "Iv23li9aYvt0VW9x4Jhh"
   PRIVATE_KEY: ${{ secrets.NKDAGILITY_BOT_CLIENTSECRET }}

jobs:

   # Setup & Configuration
  Setup:
    name: "Setup & Configuration"
    runs-on: ubuntu-latest
    outputs:
      GitVersion_BranchName: ${{ steps.gitversion.outputs.GitVersion_BranchName }}
      GitVersion_SemVer: ${{ steps.gitversion.outputs.GitVersion_SemVer }}
      GitVersion_PreReleaseLabel: ${{ steps.gitversion.outputs.GitVersion_PreReleaseLabel }}
      GitVersion_AssemblySemVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemVer }}
      GitVersion_InformationalVersion: ${{ steps.gitversion.outputs.GitVersion_InformationalVersion }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'
        includePrerelease: true
    - name: Execute GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        useConfigFile: true

  # Setup Validator
  SetupValidatorStage:
    name: "Setup Validator"
    runs-on: ubuntu-latest
    needs: Setup
    steps:
      - name: "Release WorkItemClone"
        shell: pwsh
        run: |
            Write-Output "GitVersion_BranchName: ${{needs.Setup.outputs.GitVersion_BranchName}}"
            Write-Output "GitVersion_SemVer: ${{needs.Setup.outputs.GitVersion_SemVer}}"
            Write-Output "GitVersion_PreReleaseLabel: ${{needs.Setup.outputs.GitVersion_PreReleaseLabel}}"
            Write-Output "GitVersion_AssemblySemVer: ${{needs.Setup.outputs.GitVersion_AssemblySemVer}}"
            Write-Output "GitVersion_InformationalVersion: ${{needs.Setup.outputs.GitVersion_InformationalVersion}}"

  # Build .NET Framework App
  build:
    name: "Build .NET Framework App"
    runs-on: windows-latest
    needs: Setup
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
      GitVersion_AssemblySemVer: ${{ needs.Setup.outputs.GitVersion_AssemblySemVer }}
      GitVersion_InformationalVersion: ${{ needs.Setup.outputs.GitVersion_InformationalVersion }}
    steps:
      # - name: Setup NuGet
      #   uses: NuGet/setup-nuget@v1.0.2
      # - name: Restore NuGet Packages
      #   run: nuget restore MigrationTools.sln
      # - name: Build and Publish Web App
      #   run: msbuild MigrationTools.sln 
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - run: dotnet build MigrationTools.sln /p:Version=${{ env.GitVersion_AssemblySemVer }} /p:FileVersion=${{ env.GitVersion_AssemblySemVer }} /p:InformationalVersion=${{ env.GitVersion_InformationalVersion }}
      - uses: actions/upload-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild

          path: .\**

  # Test L0 & L1
  test-fast:
    name: "Test L0 & L1"
    runs-on: windows-latest
    needs: build
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find Test Input files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
            Get-ChildItem -Path .\ -Recurse -Filter '**/*Test/*.csproj' | ForEach-Object { $_.FullName }  
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - run: dotnet test "MigrationTools.sln" --results-directory ".\test-results\" --logger trx --collect "Code coverage" --no-build --filter "(TestCategory=L0|TestCategory=L1)"
      - name: "Find Test Output files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.trx' | ForEach-Object { $_.FullName }  
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        if: always()
        with:
            check_name: 'Test Results L0 & L1'
            comment_title: "L0 & L1 Tests"
            files: |
                test-results/**/*.xml
                test-results/**/*.trx
                test-results/**/*.json

  # Test L2 & L3
  test-slow:
    name: "Test L2 & L3"
    runs-on: windows-latest
    needs: build
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find input files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
            Get-ChildItem -Path .\ -Recurse -Filter '**/*Test/*.csproj' | ForEach-Object { $_.FullName }  
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - run: dotnet test "MigrationTools.sln" --results-directory ".\test-results\" --logger trx --collect "Code coverage" --no-build --filter "(TestCategory=L2|TestCategory=L3)"
      - name: "Find Test Output files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.trx' | ForEach-Object { $_.FullName }  
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        if: always()
        with:
            check_name: 'Test Results L2 & L3'
            comment_title: "L2 & L3 Tests"
            files: |
                test-results/**/*.xml
                test-results/**/*.trx
                test-results/**/*.json
                
  # Test (L?) - tests with No Catagory
  test-long:
    name: "Test (L?) - tests with No Catagory"
    runs-on: windows-latest
    needs: build
    env:
      solution: '**/*.sln'
      buildPlatform: 'Any CPU'
      buildConfiguration: 'Release'
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find input files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
            Get-ChildItem -Path .\ -Recurse -Filter '**/*Test/*.csproj' | ForEach-Object { $_.FullName }  
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.x
      - run: dotnet test "MigrationTools.sln" --results-directory ".\test-results\" --logger trx --collect "Code coverage" --no-build --filter "(TestCategory!=L0&TestCategory!=L1&TestCategory!=L2&TestCategory!=L3)"
      - name: "Find Test Output files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.trx' | ForEach-Object { $_.FullName }  
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/windows@v2
        if: always()
        with:
            check_name: 'Test Results Long'
            comment_title: "L? Tests"
            files: |
                test-results/**/*.xml
                test-results/**/*.trx
                test-results/**/*.json
                
  # Build Docs
  BuildDocs:
    name: "Build Documentation output"
    runs-on: ubuntu-latest
    needs: [Setup]
    env:
      GitVersion_SemVer: ${{ needs.Setup.outputs.GitVersion_SemVer }}
      GitVersion_AssemblySemVer: ${{ needs.Setup.outputs.GitVersion_AssemblySemVer }}
      GitVersion_InformationalVersion: ${{ needs.Setup.outputs.GitVersion_InformationalVersion }}
    steps:
      - uses: actions/checkout@v3
      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["**/*.html"]'
          tokenPrefix: "${"
          tokenSuffix: "}"
      - uses: igsekor/pyspelling-any@v1.0.4
        id: spellcheck
        name: Spellcheck
      - name: Build Jekyll
        uses: jerryjvl/jekyll-build-action@v1
      - uses: actions/upload-artifact@v3
        with:
          name: AzureDevOpsMigrationToolsSite
          path: ./_site/**/*
  
  # Package Chocolatey
  PackageChocolatey:
    name: "(fake) Package Chocolatey"
    runs-on: ubuntu-latest
    needs: [build, Setup]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
      - uses: actions/checkout@v4

  # PackageMarketplace
  PackageMarketplace:
    name: "(fake) Package Marketplace"
    runs-on: ubuntu-latest
    needs: [build, Setup]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
      - uses: actions/checkout@v4

  # GitHubRelease
  GitHubRelease:
    name: "(fake) Release to GitHub Releases"
    runs-on: ubuntu-latest
    needs: [build, Setup, test-fast, test-slow, test-long, PackageChocolatey, PackageMarketplace]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
      - uses: actions/checkout@v4
  
  # Release to Marketplace
  MarketplaceRelease:
    name: "(fake) Release to Marketplace"
    runs-on: ubuntu-latest
    needs: [Setup, GitHubRelease, PackageMarketplace]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
  
  # Release to Chocolatey
  ChocolateyRelease:
    name: "(fake) Release to Chocolatey"
    runs-on: ubuntu-latest
    needs: [Setup, GitHubRelease, PackageChocolatey]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }   

  # Release to Winget
  WingetRelease:
    name: "(fake) Release to Winget"
    runs-on: ubuntu-latest
    needs: [Setup, GitHubRelease]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }

  # Release to Docs
  DocsRelease:
    name: "Release to Docs"
    runs-on: ubuntu-latest
    needs: [BuildDocs, Setup, GitHubRelease]
    if: ${{ success() && ( needs.Setup.outputs.GitVersion_PreReleaseLabel == 'Preview' || needs.Setup.outputs.GitVersion_PreReleaseLabel == '' ) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: AzureDevOpsMigrationBuild
      - name: "Find solution files"
        shell: pwsh
        run: |
            Get-Item -Path .\ 
            Get-ChildItem -Path .\ -Recurse -Filter '*.sln' | ForEach-Object { $_.FullName }
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: AzureDevOpsMigrationToolsSite
          path: ./_site
      - name: SFTP Upload
        # You may pin to the exact commit or the version.
        # uses: Dylan700/sftp-upload-action@f90db607d9fe1acdc0eefccee84d37c119b268fe
        uses: Dylan700/sftp-upload-action@v1.1.4
        with:
          server: nakedalmweb.sftp.wpengine.com
          username: nakedalmweb-learn
          password: ${{ secrets.SFTP_PASSWORD }}
          port: 2222
          # If true, outputs the results of the upload, without actually uploading.
          dry-run: false
          # A list of folders to upload in the format of `folder/ => upload_folder/`
          uploads: | 
              ./_site/ => ./azure-devops-migration-tools
          # If true, any existing files in the remote upload directories are deleted.
          delete: false